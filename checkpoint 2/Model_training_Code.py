# -*- coding: utf-8 -*-
"""Fake Review Detection CK2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zHKod7hMG2M9dEO3_6E1DSeCXAcOYAK9
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import SGDClassifier, LogisticRegression
import lightgbm as lgb
from sklearn.naive_bayes import MultinomialNB
from sklearn.pipeline import Pipeline
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, classification_report
import joblib

# Load dataset
df = pd.read_csv("/content/final.csv")

# Ensure correct column names
if 'text_' not in df.columns or 'label' not in df.columns:
    raise ValueError("Dataset must contain 'text_' (review text) and 'label' (target).")

X = df['text_']
y = df['label']

# Split dataset
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# TF-IDF Vectorization
vectorizer = TfidfVectorizer(max_features=5000)
X_train_transformed = vectorizer.fit_transform(X_train)
X_test_transformed = vectorizer.transform(X_test)

# Define models
models = {
    "RandomForest": RandomForestClassifier(random_state=42),
    "LogisticRegression": LogisticRegression(random_state=42, solver='liblinear'),
    "NaiveBayes": MultinomialNB(),
    "SGDClassifier": SGDClassifier(loss='hinge', penalty='l2', random_state=42),
    "LightGBM": lgb.LGBMClassifier(random_state=42)
}

# Train & Evaluate Models
best_model, best_score, best_model_name = None, 0, ""

for name, model in models.items():
    print(f"\nðŸš€ Training {name}...")
    model.fit(X_train_transformed, y_train)

    # Predictions & Evaluation
    y_pred = model.predict(X_test_transformed)
    f1 = f1_score(y_test, y_pred, average='weighted')

    print(f"âœ… {name} - F1 Score: {f1:.4f}")
    print(classification_report(y_test, y_pred))

    # Save Best Model
    if f1 > best_score:
        best_score = f1
        best_model = model
        best_model_name = name

# Save Best Model & Vectorizer
joblib.dump(best_model, "best_model.pkl")
joblib.dump(vectorizer, "tfidf_vectorizer.pkl")

print(f"\nðŸ”¥ Best Model: {best_model_name} (F1: {best_score:.4f}) saved as 'best_model.pkl'")
print("ðŸ”¥ Vectorizer saved as 'tfidf_vectorizer.pkl'")